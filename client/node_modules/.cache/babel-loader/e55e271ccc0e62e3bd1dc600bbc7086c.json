{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\nimport axios from \"axios\";\nimport { paymentFailure, paymentSuccess } from \"./Stripe.Actions\";\nimport { useHistory } from \"react-router-dom\";\nexport async function* processPaymentStart({\n  paymentMethod,\n  amount\n}) {\n  try {\n    const res = await axios({\n      url: \"payment\",\n      method: \"post\",\n      data: {\n        amount,\n        paymentMethod\n      }\n    });\n    if (res) yield put(paymentSuccess());\n  } catch (error) {\n    yield put(paymentFailure(error));\n  }\n}\nexport function* processPaymentSucess() {\n  _s();\n\n  history = useHistory();\n  alert(\"Your payment was successful\");\n  history.push(\"/\");\n}\n\n_s(processPaymentSucess, \"ebO9cvF3Ou0GZnyLIaifBK5vWck=\", false, function () {\n  return [useHistory];\n});\n\nexport function* onPaymentStart() {\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\n}\nexport function* onPaymentSuccess() {\n  yield takeLatest(stripeActionsTypes.PAYMENT_SUCCESS, processPaymentSucess);\n}\nexport function* stripeSaga() {\n  yield all([call(onPaymentStart, onPaymentSuccess)]);\n}","map":{"version":3,"sources":["D:/Github shit/react-ecommerce/client/src/Component/Redux/Stripe/Stripe.Saga.js"],"names":["takeLatest","put","all","call","stripeActionsTypes","axios","paymentFailure","paymentSuccess","useHistory","processPaymentStart","paymentMethod","amount","res","url","method","data","error","processPaymentSucess","history","alert","push","onPaymentStart","PAYMENT_START","onPaymentSuccess","PAYMENT_SUCCESS","stripeSaga"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,kBAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,gBAAgBC,mBAAhB,CAAoC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAApC,EAA+D;AACpE,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAAC;AACtBQ,MAAAA,GAAG,EAAE,SADiB;AAEtBC,MAAAA,MAAM,EAAE,MAFc;AAGtBC,MAAAA,IAAI,EAAE;AACJJ,QAAAA,MADI;AAEJD,QAAAA;AAFI;AAHgB,KAAD,CAAvB;AAQA,QAAIE,GAAJ,EAAS,MAAMX,GAAG,CAACM,cAAc,EAAf,CAAT;AACV,GAVD,CAUE,OAAOS,KAAP,EAAc;AACd,UAAMf,GAAG,CAACK,cAAc,CAACU,KAAD,CAAf,CAAT;AACD;AACF;AACD,OAAO,UAAUC,oBAAV,GAAiC;AAAA;;AACtCC,EAAAA,OAAO,GAAGV,UAAU,EAApB;AACAW,EAAAA,KAAK,CAAC,6BAAD,CAAL;AACAD,EAAAA,OAAO,CAACE,IAAR,CAAa,GAAb;AACD;;GAJgBH,oB;UACLT,U;;;AAIZ,OAAO,UAAUa,cAAV,GAA2B;AAChC,QAAMrB,UAAU,CAACI,kBAAkB,CAACkB,aAApB,EAAmCb,mBAAnC,CAAhB;AACD;AACD,OAAO,UAAUc,gBAAV,GAA6B;AAClC,QAAMvB,UAAU,CAACI,kBAAkB,CAACoB,eAApB,EAAqCP,oBAArC,CAAhB;AACD;AACD,OAAO,UAAUQ,UAAV,GAAuB;AAC5B,QAAMvB,GAAG,CAAC,CAACC,IAAI,CAACkB,cAAD,EAAiBE,gBAAjB,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\r\nimport axios from \"axios\";\r\nimport { paymentFailure, paymentSuccess } from \"./Stripe.Actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport async function* processPaymentStart({ paymentMethod, amount }) {\r\n  try {\r\n    const res = await axios({\r\n      url: \"payment\",\r\n      method: \"post\",\r\n      data: {\r\n        amount,\r\n        paymentMethod,\r\n      },\r\n    });\r\n    if (res) yield put(paymentSuccess());\r\n  } catch (error) {\r\n    yield put(paymentFailure(error));\r\n  }\r\n}\r\nexport function* processPaymentSucess() {\r\n  history = useHistory();\r\n  alert(\"Your payment was successful\");\r\n  history.push(\"/\");\r\n}\r\nexport function* onPaymentStart() {\r\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\r\n}\r\nexport function* onPaymentSuccess() {\r\n  yield takeLatest(stripeActionsTypes.PAYMENT_SUCCESS, processPaymentSucess);\r\n}\r\nexport function* stripeSaga() {\r\n  yield all([call(onPaymentStart, onPaymentSuccess)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}