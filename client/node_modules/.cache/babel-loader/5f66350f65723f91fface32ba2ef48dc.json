{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\nimport { paymentFailure, paymentSuccess } from \"./Stripe.Actions\";\nimport { fetchData } from \"./Stripe.utils\";\nexport function* processPaymentStart(data) {\n  try {\n    const res = yield call(fetchData, data);\n    if (res) yield put(paymentSuccess());\n  } catch (error) {\n    yield put(paymentFailure(error.message));\n  }\n}\nexport function* onPaymentStart() {\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\n}\nexport function* stripeSaga() {\n  yield all([call(onPaymentStart)]);\n}","map":{"version":3,"sources":["D:/Github shit/react-ecommerce/client/src/Component/Redux/Stripe/Stripe.Saga.js"],"names":["takeLatest","put","all","call","stripeActionsTypes","paymentFailure","paymentSuccess","fetchData","processPaymentStart","data","res","error","message","onPaymentStart","PAYMENT_START","stripeSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,kBAA/C;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,OAAO,UAAUC,mBAAV,CAA8BC,IAA9B,EAAoC;AACzC,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMP,IAAI,CAACI,SAAD,EAAYE,IAAZ,CAAtB;AACA,QAAIC,GAAJ,EAAS,MAAMT,GAAG,CAACK,cAAc,EAAf,CAAT;AACV,GAHD,CAGE,OAAOK,KAAP,EAAc;AACd,UAAMV,GAAG,CAACI,cAAc,CAACM,KAAK,CAACC,OAAP,CAAf,CAAT;AACD;AACF;AACD,OAAO,UAAUC,cAAV,GAA2B;AAChC,QAAMb,UAAU,CAACI,kBAAkB,CAACU,aAApB,EAAmCN,mBAAnC,CAAhB;AACD;AACD,OAAO,UAAUO,UAAV,GAAuB;AAC5B,QAAMb,GAAG,CAAC,CAACC,IAAI,CAACU,cAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\r\nimport { paymentFailure, paymentSuccess } from \"./Stripe.Actions\";\r\nimport { fetchData } from \"./Stripe.utils\";\r\n\r\nexport function* processPaymentStart(data) {\r\n  try {\r\n    const res = yield call(fetchData, data);\r\n    if (res) yield put(paymentSuccess());\r\n  } catch (error) {\r\n    yield put(paymentFailure(error.message));\r\n  }\r\n}\r\nexport function* onPaymentStart() {\r\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\r\n}\r\nexport function* stripeSaga() {\r\n  yield all([call(onPaymentStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}