{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\nimport { paymentFailure, paymentSuccess } from \"./Stripe.Actions\";\nimport { fetchData } from \"./Stripe.utils\";\nimport axios from \"axios\";\nexport function* processPaymentStart({\n  payload: priceStripe,\n  paymentMethodId\n}) {\n  const res = yield axios.post(\"payment\", {\n    amount: priceStripe,\n    paymentMethodId: paymentMethodId\n  }).then(yield put(paymentSuccess())).catch(e => put(paymentFailure(e.message)));\n}\nexport function* onPaymentStart() {\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\n}\nexport function* stripeSaga() {\n  yield all([call(onPaymentStart)]);\n}","map":{"version":3,"sources":["D:/Github shit/react-ecommerce/client/src/Component/Redux/Stripe/Stripe.Saga.js"],"names":["takeLatest","put","all","call","stripeActionsTypes","paymentFailure","paymentSuccess","fetchData","axios","processPaymentStart","payload","priceStripe","paymentMethodId","res","post","amount","then","catch","e","message","onPaymentStart","PAYMENT_START","stripeSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,kBAA/C;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,UAAUC,mBAAV,CAA8B;AACnCC,EAAAA,OAAO,EAAEC,WAD0B;AAEnCC,EAAAA;AAFmC,CAA9B,EAGJ;AACD,QAAMC,GAAG,GAAG,MAAML,KAAK,CACpBM,IADe,CACV,SADU,EACC;AACfC,IAAAA,MAAM,EAAEJ,WADO;AAEfC,IAAAA,eAAe,EAAEA;AAFF,GADD,EAKfI,IALe,CAKV,MAAMf,GAAG,CAACK,cAAc,EAAf,CALC,EAMfW,KANe,CAMRC,CAAD,IAAOjB,GAAG,CAACI,cAAc,CAACa,CAAC,CAACC,OAAH,CAAf,CAND,CAAlB;AAOD;AACD,OAAO,UAAUC,cAAV,GAA2B;AAChC,QAAMpB,UAAU,CAACI,kBAAkB,CAACiB,aAApB,EAAmCZ,mBAAnC,CAAhB;AACD;AACD,OAAO,UAAUa,UAAV,GAAuB;AAC5B,QAAMpB,GAAG,CAAC,CAACC,IAAI,CAACiB,cAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\r\nimport { paymentFailure, paymentSuccess } from \"./Stripe.Actions\";\r\nimport { fetchData } from \"./Stripe.utils\";\r\nimport axios from \"axios\";\r\n\r\nexport function* processPaymentStart({\r\n  payload: priceStripe,\r\n  paymentMethodId,\r\n}) {\r\n  const res = yield axios\r\n    .post(\"payment\", {\r\n      amount: priceStripe,\r\n      paymentMethodId: paymentMethodId,\r\n    })\r\n    .then(yield put(paymentSuccess()))\r\n    .catch((e) => put(paymentFailure(e.message)));\r\n}\r\nexport function* onPaymentStart() {\r\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\r\n}\r\nexport function* stripeSaga() {\r\n  yield all([call(onPaymentStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}