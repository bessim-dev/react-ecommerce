{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firebase-firestore\";\nimport \"firebase/firebase-auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB9uw3zqgtx3ziYoN2glvhrB0tzr4VUBOA\",\n  authDomain: \"react-ecommerce-cccf2.firebaseapp.com\",\n  databaseURL: \"https://react-ecommerce-cccf2.firebaseio.com\",\n  projectId: \"react-ecommerce-cccf2\",\n  storageBucket: \"react-ecommerce-cccf2.appspot.com\",\n  messagingSenderId: \"35666583052\",\n  appId: \"1:35666583052:web:0a6046b0b57118fd709829\",\n  measurementId: \"G-THBC2ZW8G4\"\n};\nfirebase.initializeApp(firebaseConfig); // Get the Auth service for the default app\n\nexport const auth = firebase.auth(); // Get the Firestore (database) service for the default app\n\nexport const firestore = firebase.firestore(); //create a google provider instance\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); //change the default configuration of the provider to show a list of accounts which user can select from\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const getCurrentUser = () => {\n  return new Promise((res, rej) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      res(userAuth);\n    }, rej);\n  });\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  console.log(userRef);\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertSnapshotToObj = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nexport default firebase;","map":{"version":3,"sources":["D:/Github shit/react-ecommerce/src/Component/FireBase/FireBase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","getCurrentUser","Promise","res","rej","unsubscribe","onAuthStateChanged","userAuth","createUserProfileDocument","additionalData","userRef","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertSnapshotToObj","collections","transformedCollection","docs","map","title","items","data","id","routeName","encodeURI","toLowerCase","reduce","acc"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firebase-firestore\";\r\nimport \"firebase/firebase-auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB9uw3zqgtx3ziYoN2glvhrB0tzr4VUBOA\",\r\n  authDomain: \"react-ecommerce-cccf2.firebaseapp.com\",\r\n  databaseURL: \"https://react-ecommerce-cccf2.firebaseio.com\",\r\n  projectId: \"react-ecommerce-cccf2\",\r\n  storageBucket: \"react-ecommerce-cccf2.appspot.com\",\r\n  messagingSenderId: \"35666583052\",\r\n  appId: \"1:35666583052:web:0a6046b0b57118fd709829\",\r\n  measurementId: \"G-THBC2ZW8G4\",\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n// Get the Auth service for the default app\r\nexport const auth = firebase.auth();\r\n// Get the Firestore (database) service for the default app\r\nexport const firestore = firebase.firestore();\r\n//create a google provider instance\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n//change the default configuration of the provider to show a list of accounts which user can select from\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((res, rej) => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      unsubscribe();\r\n      res(userAuth);\r\n    }, rej);\r\n  });\r\n};\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapshot = await userRef.get();\r\n  if (!snapshot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n  console.log(userRef);\r\n  return userRef;\r\n};\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach((obj) => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, obj);\r\n  });\r\n  return await batch.commit();\r\n};\r\nexport const convertSnapshotToObj = (collections) => {\r\n  const transformedCollection = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n\r\n    return {\r\n      id: doc.id,\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n  return transformedCollection.reduce((acc, collection) => {\r\n    acc[collection.title.toLowerCase()] = collection;\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}