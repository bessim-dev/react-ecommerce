{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\nimport axios from \"axios\";\nimport { paymentSuccess } from \"./Stripe.Actions\";\nexport async function* processPaymentStart({\n  paymentMethod,\n  amount\n}) {\n  try {\n    res = await axios({\n      url: \"payment\",\n      method: \"post\",\n      data: {\n        amount,\n        paymentMethod\n      }\n    });\n    if (res) yield put(paymentSuccess());\n  } catch (error) {\n    yield put(paymentFailure(error));\n  }\n}\nexport function* processPaymentSucess() {\n  alert(\"Your payment was successful\");\n  history.push(\"/\");\n}\nexport function* onPaymentStart() {\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\n}\nexport function* onPaymentSuccess() {\n  yield takeLatest(stripeActionsTypes.PAYMENT_SUCCESS, processPaymentSucess);\n}\nexport function* stripeSaga() {\n  yield all([call(onPaymentStart, onPaymentSuccess)]);\n}","map":{"version":3,"sources":["D:/Github shit/react-ecommerce/client/src/Component/Redux/Stripe/Stripe.Saga.js"],"names":["takeLatest","put","all","call","stripeActionsTypes","axios","paymentSuccess","processPaymentStart","paymentMethod","amount","res","url","method","data","error","paymentFailure","processPaymentSucess","alert","history","push","onPaymentStart","PAYMENT_START","onPaymentSuccess","PAYMENT_SUCCESS","stripeSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,gBAAgBC,mBAAhB,CAAoC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAApC,EAA+D;AACpE,MAAI;AACFC,IAAAA,GAAG,GAAG,MAAML,KAAK,CAAC;AAChBM,MAAAA,GAAG,EAAE,SADW;AAEhBC,MAAAA,MAAM,EAAE,MAFQ;AAGhBC,MAAAA,IAAI,EAAE;AACJJ,QAAAA,MADI;AAEJD,QAAAA;AAFI;AAHU,KAAD,CAAjB;AAQA,QAAIE,GAAJ,EAAS,MAAMT,GAAG,CAACK,cAAc,EAAf,CAAT;AACV,GAVD,CAUE,OAAOQ,KAAP,EAAc;AACd,UAAMb,GAAG,CAACc,cAAc,CAACD,KAAD,CAAf,CAAT;AACD;AACF;AACD,OAAO,UAAUE,oBAAV,GAAiC;AACtCC,EAAAA,KAAK,CAAC,6BAAD,CAAL;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAa,GAAb;AACD;AACD,OAAO,UAAUC,cAAV,GAA2B;AAChC,QAAMpB,UAAU,CAACI,kBAAkB,CAACiB,aAApB,EAAmCd,mBAAnC,CAAhB;AACD;AACD,OAAO,UAAUe,gBAAV,GAA6B;AAClC,QAAMtB,UAAU,CAACI,kBAAkB,CAACmB,eAApB,EAAqCP,oBAArC,CAAhB;AACD;AACD,OAAO,UAAUQ,UAAV,GAAuB;AAC5B,QAAMtB,GAAG,CAAC,CAACC,IAAI,CAACiB,cAAD,EAAiBE,gBAAjB,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\r\nimport axios from \"axios\";\r\nimport { paymentSuccess } from \"./Stripe.Actions\";\r\n\r\nexport async function* processPaymentStart({ paymentMethod, amount }) {\r\n  try {\r\n    res = await axios({\r\n      url: \"payment\",\r\n      method: \"post\",\r\n      data: {\r\n        amount,\r\n        paymentMethod,\r\n      },\r\n    });\r\n    if (res) yield put(paymentSuccess());\r\n  } catch (error) {\r\n    yield put(paymentFailure(error));\r\n  }\r\n}\r\nexport function* processPaymentSucess() {\r\n  alert(\"Your payment was successful\");\r\n  history.push(\"/\");\r\n}\r\nexport function* onPaymentStart() {\r\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\r\n}\r\nexport function* onPaymentSuccess() {\r\n  yield takeLatest(stripeActionsTypes.PAYMENT_SUCCESS, processPaymentSucess);\r\n}\r\nexport function* stripeSaga() {\r\n  yield all([call(onPaymentStart, onPaymentSuccess)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}