{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\nimport axios from \"axios\";\nimport { paymentFailure, paymentSuccess } from \"./Stripe.Actions\";\nexport function* processPaymentStart({\n  payment: amount,\n  paymentMethodId\n}) {\n  yield console.log(amount);\n\n  try {\n    const res = yield axios({\n      url: \"payment\",\n      method: \"post\",\n      data: {\n        amount,\n        paymentMethodId\n      }\n    });\n    if (res) yield put(paymentSuccess());\n  } catch (error) {\n    yield put(paymentFailure(error));\n  }\n}\nexport function* onPaymentStart() {\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\n}\nexport function* stripeSaga() {\n  yield all([call(onPaymentStart)]);\n}","map":{"version":3,"sources":["D:/Github shit/react-ecommerce/client/src/Component/Redux/Stripe/Stripe.Saga.js"],"names":["takeLatest","put","all","call","stripeActionsTypes","axios","paymentFailure","paymentSuccess","processPaymentStart","payment","amount","paymentMethodId","console","log","res","url","method","data","error","onPaymentStart","PAYMENT_START","stripeSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,kBAA/C;AAEA,OAAO,UAAUC,mBAAV,CAA8B;AAAEC,EAAAA,OAAO,EAAEC,MAAX;AAAmBC,EAAAA;AAAnB,CAA9B,EAAoE;AACzE,QAAMC,OAAO,CAACC,GAAR,CAAYH,MAAZ,CAAN;;AACA,MAAI;AACF,UAAMI,GAAG,GAAG,MAAMT,KAAK,CAAC;AACtBU,MAAAA,GAAG,EAAE,SADiB;AAEtBC,MAAAA,MAAM,EAAE,MAFc;AAGtBC,MAAAA,IAAI,EAAE;AACJP,QAAAA,MADI;AAEJC,QAAAA;AAFI;AAHgB,KAAD,CAAvB;AAQA,QAAIG,GAAJ,EAAS,MAAMb,GAAG,CAACM,cAAc,EAAf,CAAT;AACV,GAVD,CAUE,OAAOW,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACK,cAAc,CAACY,KAAD,CAAf,CAAT;AACD;AACF;AACD,OAAO,UAAUC,cAAV,GAA2B;AAChC,QAAMnB,UAAU,CAACI,kBAAkB,CAACgB,aAApB,EAAmCZ,mBAAnC,CAAhB;AACD;AACD,OAAO,UAAUa,UAAV,GAAuB;AAC5B,QAAMnB,GAAG,CAAC,CAACC,IAAI,CAACgB,cAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport stripeActionsTypes from \"./Stripe.ActionsTypes\";\r\nimport axios from \"axios\";\r\nimport { paymentFailure, paymentSuccess } from \"./Stripe.Actions\";\r\n\r\nexport function* processPaymentStart({ payment: amount, paymentMethodId }) {\r\n  yield console.log(amount);\r\n  try {\r\n    const res = yield axios({\r\n      url: \"payment\",\r\n      method: \"post\",\r\n      data: {\r\n        amount,\r\n        paymentMethodId,\r\n      },\r\n    });\r\n    if (res) yield put(paymentSuccess());\r\n  } catch (error) {\r\n    yield put(paymentFailure(error));\r\n  }\r\n}\r\nexport function* onPaymentStart() {\r\n  yield takeLatest(stripeActionsTypes.PAYMENT_START, processPaymentStart);\r\n}\r\nexport function* stripeSaga() {\r\n  yield all([call(onPaymentStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}